
------------------------------------------------------
名前空間、ブロックスコープについて
------------------------------------------------------

■ 名前空間
-　-　-　-　-　-　-　-　-　-　-
(1) 名前空間とは
名前空間（なまえくうかん）はNamespaceの訳語で、名前の集合を分割することで衝突の可能性を低減しつつ参照を容易にする概念である。（Wikipedia）

・名前空間は名前の衝突を防ぐためのもの
・名前とは変数名や関数名のこと
・「何に属する要素なのか」を示す特別な名称を与えて要素名の先頭などに付加する手法
・要素の集団の識別名や、識別名を付加する仕組みのことを名前空間という


(2) Javascriptにおける名前空間
・グローバル変数汚染の回避
・JavaScript には名前空間が言語仕様として存在しない
・オブジェクトを多段定義して名前空間「っぽい」書き方をする
・グローバル変数には「名前空間オブジェクト」を最小限にする
・グローバルオブジェクトをひとつ作成して、すべての変数、メソッド、関数をそのオブジェクトのプロパティとする

	******************************************
	<code>
		//グローバルオブジェクトを宣言する
		if (typeof MYAPP === "undefined") {
			var MYAPP = {};
		}
		var MYAPP = MYAPP || {};
	</code>
	******************************************


	******************************************
	<code>
		MYAPP.utilities = (function (){
			var util = {};

			util.start = function() {
			    console.log("スタート！");
			};

			util.end = function() {
			    console.log("おわり！");
			};
			return util;
		})();
	</code>
	******************************************


例）r.js → rjs
例）common.js → util, Utility


■ ブロックスコープ
-　-　-　-　-　-　-　-　-　-　-

(1) スコープとは
変数の有効範囲のことで、「変数がスクリプトの中のどの場所から参照できるか」を決める概念です。

＜ポイント＞
同じ名前の変数が、意図せず競合することを避ける。
スコープが違う場合、同じ名前の変数であっても別物として扱われる。
ローカル変数の記憶領域は、関数の実行が終わり次第、破棄される。
グローバル変数はプログラムが終了するまで記憶領域を確保するため、関数内でしか必要ない変数までグローバル変数にした場合、無駄にメモリを消費することになる。

(2) ES5までのスコープ

・グローバルスコープ
スクリプト全体から参照できる
JavaScriptではvar命令を使わずに宣言した変数はすべてグローバル変数とみなす。（varはつけましょう）

・ローカルスコープ（関数スコープ）
定義された関数の中でのみ参照できる

(3) ブロックスコープ
・Java などの言語では、if や for などの {} で囲まれたブロックごとにもブロックスコープがあるが、ES5以前のJavaScript には存在しない。
・{}で囲まれている領域をブロックと呼ぶが、これはスコープは作らなかった。そのため、ifやforはスコープを持たなかった。

	******************************************
	<code>
		var x = 0;
		console.log(x);

		if(true){
			var x = 1;
			console.log(x);
		};

		console.log(x);
	</code>
	// ブロックスコープを持たないため、if文の内側のxも、外側のxも、同じものを指す
	******************************************

	******************************************
	<code>
		var x = 0;
		console.log(x);

		if(true){
			let x = 1;
			console.log(x);
		};

		console.log(x);
	</code>
	// letはブロックスコープを持つため、if文の内側のxと外側のxは、区別される
	******************************************

・letは「変数の巻き上げを行うが参照することは出来ない」。

	******************************************
	<code>
		let scope = 'This is global.';
		var myFunc2 = function(){
			console.log(scope);
			var scope = 'This is local.';
			console.log(scope);
		};
		myFunc2();
	</code>
	******************************************

	******************************************
	<code>
		let scope = 'This is global.';
		var myFunc3 = function(){
			console.log(scope);
			let scope = 'This is local.';
			console.log(scope);
		};
		myFunc3();
	</code>
	******************************************


■参考文献
-　-　-　-　-　-　-　-　-　-　-
var,let,constの違いは、ブロックスコープと巻き上げ
http://numb86-tech.hatenablog.com/entry/2016/08/27/132310

スコープとクロージャ
http://numb86-tech.hatenablog.com/entry/2016/07/02/172709

JavaScript のスコープを理解する
http://tacamy.hatenablog.com/entry/2012/12/30/191125

JavaScript のスコープチェーンとクロージャを理解する
http://tacamy.hatenablog.com/entry/2012/12/31/005951
