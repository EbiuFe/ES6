------------------------------------------------------
Generator、ジェネレータ関数について
------------------------------------------------------

■ IteratorとGenerator
-　-　-　-　-　-　-　-　-　-　-　-　-　-　-　-
＜意味＞
　・Iterator：配列やそれに類似するデータ構造の各要素に対する繰返し処理の抽象化
　・Generator：数列の各要素の値などを次々と生成（Generate）し他の手続きに渡す、という機能を持っている手続き
（wikipediaから引用）

＜定義の仕方＞
	◇ Iterator ◇
	******************************************
	<code>
	var obj = {};  //Iterableなオブジェクト
	obj[Symbol.iterator] = function(){
		var iterator = {};  //Iterator
		iterator.next = function(){
			var iteratorResult = {value: v, done: false};  //IteratorResult
			return iteratorResult;
		};
		return iterator;
	};
	</code>
	******************************************

	◇ Generator ◇
	******************************************
	<code>
	function* generator(){};
	var obj = generator();
	</code>
	******************************************

	＊例＊
	・・1〜10の数字を順番に取り出す
	<code>
	/* 結果 */
	/*
		1
		2
		3
		4
		5
		6
		7
		8
		9
		10
	*/
	</code>

	◇ Iterator ◇
	******************************************
	<code>
	var obj = {};
	obj[Symbol.iterator] = function(){
		var iterator = {};
		var count = 1;
		iterator.next = function(){
			var iteratorResult = (count <= 10)
				?{value: count++, done: false}
				:{value: undefined, done: true};
			return iteratorResult;
		};
		return iterator;
	};

	var iterator = obj[Symbol.iterator]();
	var iteratorResult;
	while(true){
		iteratorResult = iterator.next();
		if(iteratorResult.done) break;
		console.log(iteratorResult.value);
	}
	</code>
	******************************************

	もしくは

	******************************************
	<code>
	var ary = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	for(var num of ary) console.log(num);
	</code>
	******************************************

	◇ Generator ◇
	******************************************
	<code>
	function* generator(from, to){while(from <= to) yield from++;};
	var ary = generator(1, 10);
	for(var num of ary) console.log(num);
	</code>
	******************************************


■ Generator、ジェネレータ関数について
-　-　-　-　-　-　-　-　-　-　-　-　-　-　-　-
＜ポイント＞
　・「function*」を使う
　・Generator = Generator関数から得ることのできるオブジェクト
　・Generator ⊂ Iterator
　　あくまでIteratorであり、Generator関数を使うことでより見やすく書いたり、オブジェクトを生成するためのツール
　・関数の実行を途中停止できる = 非同期処理が書ける

＜使いどころ＞
　1. オブジェクト生成
　2. 非同期処理

＜オブジェクト生成＞
  (例1)・・フィボナッチ数列の生成
	******************************************
	<code>
	function* fibonacci(){
		var a = 0, b = 1, c;
		while(true){
			c = a + b;
			yield a;
			a = b;
			b = c;
		}
	}

	var g = fibonacci();
	for(var num of g){
		if(num > 1000) break;
		console.log(num);
	}

	/* 結果 */
	/*
		0
		1
		1
		2
		3
		5
		8
		13
		21
		34
		55
		89
		144
		233
		377
		610
		987
	*/
	</code>
	******************************************

  (例2)・・乱数の生成
	******************************************
	<code>
	function* randomArray(max, len){
		for(var i = 0; i < len; i++) yield Math.floor(Math.random() * max) + 1;
	}

	console.log([...randomArray(5, 10)]);
	
	/* 結果 */
	/*
		[2, 3, 1, 1, 2, 1, 3, 2, 3, 5] //一例
	*/
	</code>
	******************************************

＜非同期処理＞
  (例1)・・フィボナッチ数列の生成
	******************************************
	<code>
	function* aisatu(){
		alert('おはよう'); yield;
		alert('こんにちは'); yield;
		alert('こんばんは'); yield;
		alert('さようなら'); yield;
	}

	var g = aisatu();
	document.onclick = function(){
		g.next();
	};

	/* 結果 */
	/*
		ページをクリックするたびに g.next(); を実行する

		1回目クリック：おはよう
		2回目クリック：こんにちは
		3回目クリック：こんばんは
		4回目クリック：さようなら
		5回目クリック：何も起こらない (value:undefined, done:true)
	*/
	</code>
	******************************************

  (例2)・・考えてみよう
	******************************************
	<code>
	function* number(n){
		n++;
		yield n;
		n *= 2;
		yield n;
		n = 0;
		yield n;
	}

	var g = number(10);

	console.log(g.next());
	console.log(g.next());
	console.log(g.next());
	console.log(g.next());
	</code>
	******************************************

  (例3)・・前のが完了したら次のが順番に実行
	******************************************
	<code>
	function async(generator){
		var g = generator();
		(function done(value){
			var result = g.next(value);
			if(!result.done) result.value(done);
		})();
	}

	async(function*(){
		console.log('start');  //スタート
		yield function(done){
			setTimeout(done, 1000);
		};
		console.log('1sec');  //スタートから1秒後
		yield function(done){
			setTimeout(done, 2000);
		};
		console.log('3sec');  //スタートから3秒後
		yield function(done){
			document.onclick = done;
		}
		document.onclick = null;
		console.log('click');  //スタートから3秒後以降でクリックした瞬間
		yield function(done){
			setTimeout(done, 1000);
		};
		console.log('1sec from click');  //クリックしてから1秒後
	});
	</code>
	******************************************


■参考文献
-　-　-　-　-　-　-　-　-　-　-
http://qiita.com/kura07/items/cf168a7ea20e8c2554c6
http://qiita.com/kura07/items/d1a57ea64ef5c3de8528#3-%E5%AE%9F%E7%94%A8%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB
